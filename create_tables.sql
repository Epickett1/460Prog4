
-- Drop tables if they exist (for clean re-creation)
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE LiftUsage CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE EquipmentRental CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE LessonOrder CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Lesson CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Instructor CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Employee CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE SkiPass CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Member CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Equipment CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE ChangeLog CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE LiftTrail CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Lift CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Trail CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE Property CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/



  CREATE SEQUENCE member_seq      START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE skipass_seq     START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE employee_seq    START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE instructor_seq  START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE lesson_seq      START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE lessonorder_seq START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE equipment_seq   START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE equipmentrental_seq START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE trail_seq       START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE lift_seq        START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE liftusage_seq   START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE property_seq    START WITH 10 INCREMENT BY 1;
CREATE SEQUENCE changelog_seq   START WITH 10 INCREMENT BY 1;


-- MEMBER
CREATE TABLE Member (
  MID NUMBER PRIMARY KEY,
  FirstName VARCHAR2(50),
  LastName VARCHAR2(50),
  PhoneNumber VARCHAR2(20),
  EmailAddress VARCHAR2(100),
  DateOfBirth DATE,
  EmergencyContact VARCHAR2(20)
);
GRANT SELECT ON Member TO PUBLIC;

-- SKIPASS
CREATE TABLE SkiPass (
  PID NUMBER PRIMARY KEY,
  TotalUses NUMBER,
  RemainingUses NUMBER,
  PurchaseDateTime TIMESTAMP,
  ExpirationDate TIMESTAMP,
  Price NUMBER,
  PassType VARCHAR2(20),
  MID NUMBER,
  IsValid NUMBER,
  FOREIGN KEY (MID) REFERENCES Member(MID)
);
GRANT SELECT ON SkiPass TO PUBLIC;

-- EMPLOYEE
CREATE TABLE Employee (
  EID NUMBER PRIMARY KEY,
  PID NUMBER,
  FirstName VARCHAR2(50),
  LastName VARCHAR2(50),
  Position VARCHAR2(30),
  Education VARCHAR2(30),
  Gender VARCHAR2(10),
  Age NUMBER,
  StartDate DATE,
  MonthlySalary NUMBER,
  FOREIGN KEY (PID) REFERENCES Property(PropertyID)
);
GRANT SELECT ON Employee TO PUBLIC;

-- INSTRUCTOR
CREATE TABLE Instructor (
  IID NUMBER PRIMARY KEY,
  EID NUMBER,
  Certification NUMBER,
  FOREIGN KEY (EID) REFERENCES Employee(EID)
);
GRANT SELECT ON Instructor TO PUBLIC;

-- LESSON
CREATE TABLE Lesson (
  LID NUMBER PRIMARY KEY,
  Type VARCHAR2(20),
  Difficulty VARCHAR2(20),
  TimeOfClass VARCHAR2(10),
  Duration VARCHAR2(20),
  Price NUMBER,
  IID NUMBER,
  FOREIGN KEY (IID) REFERENCES Instructor(IID)
);
GRANT SELECT ON Lesson TO PUBLIC;

-- LESSONORDER
CREATE TABLE LessonOrder (
  OID NUMBER PRIMARY KEY,
  MID NUMBER,
  LID NUMBER,
  NumberOfSessions NUMBER,
  SessionsLeft NUMBER,
  PurchaseDate DATE,
  FOREIGN KEY (MID) REFERENCES Member(MID),
  FOREIGN KEY (LID) REFERENCES Lesson(LID)
);
GRANT SELECT ON LessonOrder TO PUBLIC;

-- EQUIPMENT
CREATE TABLE Equipment (
  EID NUMBER PRIMARY KEY,
  Type NUMBER,
  Status NUMBER,
  SizeOrLength NUMBER,
  IsArchived NUMBER,
  ChangeID NUMBER,
  FOREIGN KEY (ChangeID) REFERENCES ChangeLog(ChangeID)
);
GRANT SELECT ON Equipment TO PUBLIC;

-- EQUIPMENTRENTAL
CREATE TABLE EquipmentRental (
  RID NUMBER PRIMARY KEY,
  MID NUMBER,
  PID NUMBER,
  EID NUMBER,
  RentalDateTime TIMESTAMP,
  Status NUMBER,
  FOREIGN KEY (MID) REFERENCES Member(MID),
  FOREIGN KEY (PID) REFERENCES SkiPass(PID),
  FOREIGN KEY (EID) REFERENCES Equipment(EID)
);
GRANT SELECT ON EquipmentRental TO PUBLIC;

-- PROPERTY
CREATE TABLE Property (
  PropertyID NUMBER PRIMARY KEY,
  Type VARCHAR2(30),
  Name VARCHAR2(100),
  MonthlyIncome NUMBER
);
GRANT SELECT ON Property TO PUBLIC;

-- TRAIL
CREATE TABLE Trail (
  TID NUMBER PRIMARY KEY,
  Name VARCHAR2(100),
  StartLocation VARCHAR2(100),
  EndLocation VARCHAR2(100),
  Status NUMBER,
  Difficulty VARCHAR2(30),
  Category VARCHAR2(30)
);
GRANT SELECT ON Trail TO PUBLIC;

-- LIFT
CREATE TABLE Lift (
  LiftID NUMBER PRIMARY KEY,
  Name VARCHAR2(50),
  OpenTime VARCHAR2(10),
  CloseTime VARCHAR2(10),
  Status NUMBER
);
GRANT SELECT ON Lift TO PUBLIC;

-- LIFTTRAIL
CREATE TABLE LiftTrail (
  TID NUMBER,
  LiftID NUMBER,
  PRIMARY KEY (TID, LiftID),
  FOREIGN KEY (TID) REFERENCES Trail(TID),
  FOREIGN KEY (LiftID) REFERENCES Lift(LiftID)
);
GRANT SELECT ON LiftTrail TO PUBLIC;

-- LIFTUSAGE
CREATE TABLE LiftUsage (
  UID NUMBER PRIMARY KEY,
  PID NUMBER,
  LiftID NUMBER,
  DateTimeofUse TIMESTAMP,
  FOREIGN KEY (PID) REFERENCES SkiPass(PID),
  FOREIGN KEY (LiftID) REFERENCES Lift(LiftID)
);
GRANT SELECT ON LiftUsage TO PUBLIC;

-- CHANGELOG
CREATE TABLE ChangeLog (
  ChangeID NUMBER PRIMARY KEY,
  Description VARCHAR2(100)
);
GRANT SELECT ON ChangeLog TO PUBLIC;

ALTER TABLE SkiPass
  ADD CONSTRAINT chk_pass_type
    CHECK (PassType IN ('OneDay','TwoDay','FourDay','Season'));

ALTER TABLE Equipment
  ADD CONSTRAINT chk_equip_size
     CHECK (
       (Type = 1 AND SizeOrLength BETWEEN 4 AND 14) OR
       (Type = 2 AND SizeOrLength BETWEEN 100 AND 140) OR
       â€¦
     );

CREATE OR REPLACE TRIGGER trg_liftusage_after
  AFTER INSERT ON LiftUsage
  FOR EACH ROW
BEGIN
  UPDATE SkiPass
     SET RemainingUses = RemainingUses - 1
   WHERE PID = :NEW.PID
     AND RemainingUses > 0
     AND ExpirationDate >= SYSTIMESTAMP;
END;

CREATE OR REPLACE TRIGGER trg_rental_after
  AFTER INSERT ON EquipmentRental
  FOR EACH ROW
BEGIN
  UPDATE SkiPass
     SET RemainingUses = RemainingUses - 1
   WHERE PID = :NEW.PID
     AND RemainingUses > 0
     AND ExpirationDate >= SYSTIMESTAMP;
END;

CREATE OR REPLACE VIEW GrossMonthlyIncome AS
SELECT
  (SELECT SUM(MonthlyIncome) FROM Property)
  -
  (SELECT SUM(MonthlySalary)  FROM Employee)
  AS GrossIncome
FROM DUAL;

CREATE OR REPLACE TRIGGER trg_equip_log
  BEFORE INSERT
  ON Equipment
  FOR EACH ROW
DECLARE
  v_cid NUMBER;
BEGIN
  v_cid := changelog_seq.NEXTVAL;
  INSERT INTO ChangeLog(ChangeID, Description)
    VALUES (
      v_cid,
      'Added equipment EID=' || :NEW.EID
       || ' type=' || :NEW.Type
       || ' size=' || :NEW.SizeOrLength
    );
  :NEW.ChangeID := v_cid;
END;
/

CREATE OR REPLACE TRIGGER trg_skipass_set_exp
  BEFORE INSERT
  ON SkiPass
  FOR EACH ROW
BEGIN
  IF :NEW.ExpirationDate IS NULL THEN
    CASE :NEW.PassType
      WHEN 'OneDay'   THEN
        :NEW.ExpirationDate := :NEW.PurchaseDateTime + INTERVAL '1' DAY;
      WHEN 'TwoDay'   THEN
        :NEW.ExpirationDate := :NEW.PurchaseDateTime + INTERVAL '2' DAY;
      WHEN 'FourDay'  THEN
        :NEW.ExpirationDate := :NEW.PurchaseDateTime + INTERVAL '4' DAY;
      WHEN 'Season'   THEN
        :NEW.ExpirationDate := TO_TIMESTAMP('2025-04-30 23:59:59', 'YYYY-MM-DD HH24:MI:SS');
      ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Unknown PassType '||:NEW.PassType);
    END CASE;
  END IF;
END;
/

